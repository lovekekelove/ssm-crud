<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--spring的配置文件，这里主要配置和业务有关的-->
    <!--扫描包-->
    <context:component-scan base-package="com.maven.ssm.crud">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--引入外部的数据文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--配置Druid数据源，事务控制-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name = "url" value = "${jdbc.url}" />
        <property name = "username" value = "${jdbc.username}" />
        <property name = "password" value = "${jdbc.password}" />
        <property name = "driverClassName" value = "${jdbc.driver}" />
    </bean>

    <!--====================配置和mybatis整合==============-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定mybatis,mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现就爱入到ioc中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描dao接口的实现，加入到IOC容器中-->
        <property name="basePackage" value="com.maven.ssm.crud.dao"/>
    </bean>

    <!--配置一个可以批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>
    <!--===================事务控制的配置=============-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <!--开启基于注解的事务 使用xml样式-->
    <!-- 配置事务切点，并把切点和事务关联起来 -->
    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="txpoint" expression="execution(* com.maven.ssm.crud.service..*(..) )"/>
        <!--配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txpoint"/>
    </aop:config>

    <!--配置事务增强，事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有的方法都是事务-->
            <tx:method name="*"/>
            <!--以get方法开头的所有方法-->
            <tx:method name="get*" read-only="true" />
        </tx:attributes>
    </tx:advice>
</beans>